<#+
public class EntityConfigurationTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
	private string _mainNameSpace;

    public EntityConfigurationTemplate(T4ModelInfo model, string mainNameSpace)
    {
        _model = model;
		_mainNameSpace = mainNameSpace;
    }

    public string FileName
    {
        get{ return string.Format("{0}Configuration.generated.cs", _model.Name); }
    }

	public override string TransformText()
	{
		base.TransformText();
#>
// -----------------------------------------------------------------------
//  <copyright file="<#= _model.Name #>Configuration.generated.cs" company="OSharp开源团队">
//      Copyright (c) 2015 OSHARP. All rights reserved.
//  </copyright>
//  <site>http://www.osharp.org</site>
//  <last-editor>郭明锋</last-editor>
//  <last-date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #></last-date>
// -----------------------------------------------------------------------

using System;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OSharp.Entity;

using <#= _mainNameSpace #><#= "." + _model.ModuleName #>.Entities;


namespace <#= _mainNameSpace #>.EntityConfiguration<#= "." + _model.ModuleName #>
{
    /// <summary>
    /// 实体类-数据表映射——<#= _model.Description #>
    /// </summary> 
	public partial class <#= _model.Name #>Configuration : EntityTypeConfigurationBase<<#= _model.Name #>, <#= GetTypeName(_model.KeyType) #>>
    {        
        /// <summary>
        /// 重写以实现实体类型各个属性的数据库配置
        /// </summary>
        /// <param name="builder">实体类型创建器</param>
        public override void Configure(EntityTypeBuilder<<#= _model.Name #>> builder)
        {
			<#= _model.Name #>ConfigurationAppend();
        }

        /// <summary>
        /// 额外的数据映射
        /// </summary>
        partial void <#= _model.Name #>ConfigurationAppend();
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}

    private string GetTypeName(Type type)
    {
        if(type == null || type == typeof(int))
            return "int";
        else if(type == typeof(long))
            return "long";
        else if(type == typeof(float))
            return "float";
        else if(type == typeof(double))
            return "double";
        else
            return type.Name;
    }
}
#>